---
- name: Deploy Spine-Leaf Architecture in GNS3
  hosts: gns3_servers
  gather_facts: no
  vars_files:
    - ../group_vars/all.yaml

  tasks:

    - name: Get GNS3 version
      uri:
        url: "{{ gns3_url }}:{{ gns3_port }}/v2/version"
        method: GET
      register: gns3_version

    - name: Create GNS3 project
      uri:
        url: "{{ gns3_url }}:{{ gns3_port }}/v2/projects"
        method: POST
        body_format: json
        body: "{{ project_config | to_json }}"
        status_code: [201, 409]  # 409 for already exists
      register: project_result

    - name: Set project ID
      set_fact:
        project_id: "{{ project_result.json.project_id }}"

    - name: Get existing templates
      uri:
        url: "{{ gns3_url }}:{{ gns3_port }}/v2/templates"
        method: GET
      register: existing_templates

    - name: Create Cisco 7200 template if it doesn't exist
      uri:
        url: "{{ gns3_url }}:{{ gns3_port }}/v2/templates"
        method: POST
        body_format: json
        body: 
          name: "{{ cisco_7200_template_name }}"
          compute_id: "local"
          template_type: "dynamips"
          image: "{{ cisco_7200_image_path }}/{{ cisco_7200_image_name }}"  # Full path to the image
          symbol: ":/symbols/router.svg"
          category: "router"
          ram: 512
          nvram: 128
        status_code: [200, 201, 409]  # 409 for already exists
      register: cisco_7200_template_result
      when: cisco_7200_template_name not in (existing_templates.json | map(attribute='name') | list)

    # Cisco IOSvL2 template creation (unchanged, but included for context)
    - name: Create Cisco IOSvL2 template if it doesn't exist
      uri:
        url: "{{ gns3_url }}:{{ gns3_port }}/v2/templates"
        method: POST
        body_format: json
        body: 
          name: "{{ cisco_iosvl2_template_name }}"
          compute_id: "local"
          template_type: "qemu"
          hda_disk_image: "{{ cisco_iosvl2_image_path }}/{{ cisco_iosvl2_image_name }}"  # Full path to the image
          symbol: ":/symbols/multilayer_switch.svg"
          category: "switch"
          adapters: 16
          ram: 768
          console_type: "telnet"
          qemu_path: "{{ qemu_path }}"
          platform: "x86_64"
        status_code: [200, 201, 409]  # 409 for already exists
      register: iosvl2_template_result
      when: cisco_iosvl2_template_name not in (existing_templates.json | map(attribute='name') | list)

    - name: Get updated template list
      uri:
        url: "{{ gns3_url }}:{{ gns3_port }}/v2/templates"
        method: GET
      register: updated_templates

    - name: Find template IDs
      set_fact:
        cisco_7200_template_id: "{{ item.template_id }}"
        cisco_iosvl2_template_id: "{{ item.template_id }}"
      loop: "{{ updated_templates.json }}"
      when: item.name == cisco_7200_template_name or item.name == cisco_iosvl2_template_name

    - name: Deploy devices
      uri:
        url: "{{ gns3_url }}:{{ gns3_port }}/v2/projects/{{ project_id }}/templates/{% if item.template == cisco_7200_template_name %}{{ cisco_7200_template_id }}{% else %}{{ cisco_iosvl2_template_id }}{% endif %}"
        method: POST
        body_format: json
        body: "{{ {'name': item.name, 'x': item.x|int, 'y': item.y|int} | to_json }}"
        status_code: [201, 409]  # 409 for already exists
      loop: "{{ devices }}"
      register: device_results

    - name: Deploy VPCS nodes
      uri:
        url: "{{ gns3_url }}:{{ gns3_port }}/v2/projects/{{ project_id }}/nodes"
        method: POST
        body_format: json
        body: "{{ {'name': item.name, 'node_type': 'vpcs', 'compute_id': 'local', 'x': item.x|int, 'y': item.y|int} | to_json }}"
        status_code: 201
      loop: "{{ vpcs_nodes }}"
      register: vpcs_results

    - name: Get all nodes in the project
      uri:
        url: "{{ gns3_url }}:{{ gns3_port }}/v2/projects/{{ project_id }}/nodes"
        method: GET
      register: all_nodes

    - name: Create device ID map
      set_fact:
        device_id_map: "{{ device_id_map | default({}) | combine({item.name: item.node_id}) }}"
      loop: "{{ all_nodes.json }}"

    - name: Get detailed information for each node
      uri:
        url: "{{ gns3_url }}:{{ gns3_port }}/v2/projects/{{ project_id }}/nodes/{{ item.node_id }}"
        method: GET
      loop: "{{ all_nodes.json }}"
      register: node_details

    - name: Create port mapping for each device
      set_fact:
        port_map: "{{ port_map | default({}) | combine({item.json.name: item.json.ports | map(attribute='port_number') | map('int') | list}) }}"
      loop: "{{ node_details.results }}"

    - name: Create device interface map
      set_fact:
        device_interface_map: "{{ device_interface_map | default({}) | combine({item.name: (item.enabled_interfaces | default(2))}) }}"
      loop: "{{ devices + vpcs_nodes }}"

    - name: Get detailed information for each node
      uri:
        url: "{{ gns3_url }}:{{ gns3_port }}/v2/projects/{{ project_id }}/nodes/{{ item.node_id }}"
        method: GET
      loop: "{{ all_nodes.json }}"
      register: node_details

    - name: Create port mapping for each device
      set_fact:
        port_map: "{{ port_map | default({}) | combine({item.json.name: item.json.ports | map(attribute='port_number') | map('int') | list}) }}"
        adapter_map: "{{ adapter_map | default({}) | combine({item.json.name: item.json.ports | map(attribute='adapter_number') | map('int') | list}) }}"
      loop: "{{ node_details.results }}"

    - name: Debug port and adapter information
      debug:
        msg: "Device: {{ item.json.name }}, Ports: {{ port_map[item.json.name] }}, Adapters: {{ adapter_map[item.json.name] }}"
      loop: "{{ node_details.results }}"

    - name: Create links between devices
      uri:
        url: "{{ gns3_url }}:{{ gns3_port }}/v2/projects/{{ project_id }}/links"
        method: POST
        body_format: json
        body: >
          {
            "nodes": [
              {
                "node_id": "{{ device_id_map[item.node_a] }}",
                "adapter_number": {{ adapter_map[item.node_a][item.port_a | int] }},
                "port_number": {{ port_map[item.node_a][item.port_a | int] }}
              },
              {
                "node_id": "{{ device_id_map[item.node_b] }}",
                "adapter_number": {{ adapter_map[item.node_b][item.port_b | int] }},
                "port_number": {{ port_map[item.node_b][item.port_b | int] }}
              }
            ]
          }
        status_code: [201, 409]  # 409 for already exists
      loop: "{{ links }}"
      register: link_results

    - name: Start the project
      uri:
        url: "{{ gns3_url }}:{{ gns3_port }}/v2/projects/{{ project_id }}/open"
        method: POST
        status_code: [200, 201]
      register: start_result

    - name: Verify project is running
      uri:
        url: "{{ gns3_url }}:{{ gns3_port }}/v2/projects/{{ project_id }}"
        method: GET
        status_code: 200
      register: final_project_status

    - name: Project deployment summary
      debug:
        msg: |
          GNS3 Enterprise Network Deployment Summary:
          - Project Name: {{ gns3_project_name }}
          - Project ID: {{ project_id }}
          - Devices Deployed: {{ devices | length }}
          - VPCS Nodes Deployed: {{ vpcs_nodes | length }}
          - Total Links Created: {{ links | length }}
          - Project Status: {{ final_project_status.json.status }}

    - name: Display link creation results
      debug:
        msg: "Link creation results: {{ link_results.results | map(attribute='status') | list }}"

    - name: Count successful link creations
      set_fact:
        successful_links: "{{ link_results.results | selectattr('status', 'in', [201, 409]) | list | length }}"

    - name: Display successful link count
      debug:
        msg: "Successfully created or already existing links: {{ successful_links }} out of {{ links | length }}"